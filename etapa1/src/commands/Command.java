package commands;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import fileio.input.*;
import lombok.Getter;
import templates.SearchTemplate;
import templates.SelectTemplate;

import java.lang.reflect.Array;
import java.util.ArrayList;
public class Command implements Search{
    @Getter
    private String command;
    @Getter
    private String username;
    @Getter
    private int timestamp;
    @Getter
    private String type;
    private Filter filters;
    @Getter
    private int itemNumber;
    @Getter
    private String message;
    @Getter
    private ArrayList<String> results;

    private LibraryInput library;

    public void setLibrary(LibraryInput library) {
        this.library = library;
    }

    public Command() {

    }

    public Command(Command command) {
        this.command = command.command;
        this.username = command.username;
        this.timestamp = command.timestamp;
        this.type = command.type;
        this.filters = command.filters;
        this.itemNumber = command.itemNumber;
        this.message = command.message;
        this.results = command.results;
        this.library = command.library;
    }

    public Command(LibraryInput library) {
        this.library = library;
    }

    public JsonNode execute() {
        ObjectMapper objectMapper = new ObjectMapper();
        if (command.equals("search")) {
            SearchTemplate output = new SearchTemplate();
            if (type.equals("song")) {
                songSearch();
                output.setCommand(command);
                output.setUser(username);
                output.setTimestamp(timestamp);
                output.setResults(results);
                output.setMessage("Search returned " + results.size() + " results");
                return objectMapper.valueToTree(output);
            } else if (type.equals("podcast")) {
                podcastSearch();
                output.setCommand(command);
                output.setUser(username);
                output.setTimestamp(timestamp);
                output.setResults(results);
                output.setMessage("Search returned " + results.size() + " results");
                return objectMapper.valueToTree(output);
            }
        }
        if (command.equals("select")) {
            SelectTemplate output = new SelectTemplate();
            output.setCommand(command);
            output.setUser(username);
            output.setTimestamp(timestamp);
            songSelect();
            output.setMessage(message);
            return objectMapper.valueToTree(output);
        }

        throw new IllegalArgumentException("Invalid command: " + command);
    }

    public void setFilters(Filter filters) {
        this.filters = filters;
    }

    @Override
    public void songSearch() { //  if statements for each field generated by chat-gpt
        results = new ArrayList<>();
        ArrayList<SongInput> parsedResults = library.getSongs();

        if (filters.getName() != null && !filters.getName().isEmpty()) { // filter by name
            for (SongInput iter : parsedResults) {
                if (iter.getName().startsWith(filters.getName())) {
                    results.add(iter.getName());
                }
            }
            parsedResults = clearResults(parsedResults);
        }

        if (filters.getAlbum() != null && !filters.getAlbum().isEmpty()) { // filter by album
            for (SongInput iter : parsedResults) {
                if (iter.getAlbum().equals(filters.getAlbum()) &&
                    !results.contains(iter.getName())) { // check if song is already in
                    
                    results.add(iter.getName());

                }
            }
            parsedResults = clearResults(parsedResults);
        }

        if (filters.getTags() != null && !filters.getTags().isEmpty()) {
            // filter by tags
            for (SongInput iter : parsedResults) {
                boolean isTagged = true;
                for (String filterIter : filters.getTags()) {
                    if (!iter.getTags().contains(filterIter)) {
                        isTagged = false;
                    }
                }

                if (isTagged &&
                    !results.contains(iter.getName())) {
                    results.add(iter.getName());

                }
            }
            parsedResults = clearResults(parsedResults);
        }


        if (filters.getLyrics() != null && !filters.getLyrics().isEmpty()) { // filter by lyrics
            for (SongInput iter : parsedResults) {
                if (iter.getLyrics().contains(filters.getLyrics()) &&
                        !results.contains(iter.getName())) {
                    
                    results.add(iter.getName());

                }
            }
            parsedResults = clearResults(parsedResults);
        }

        if (filters.getGenre() != null && !filters.getGenre().isEmpty()) { // filter by genre
            for (SongInput iter : parsedResults) {
                if (iter.getGenre().equalsIgnoreCase(filters.getGenre()) &&
                        !results.contains(iter.getName())) {
                    
                    results.add(iter.getName());

                }
            }
            parsedResults = clearResults(parsedResults);
        }

        if (filters.getReleaseYear() != null && !filters.getReleaseYear().isEmpty()) { // filter by release year
            boolean lower = false;
            boolean higher = false;
            if (filters.getReleaseYear().charAt(0) == '<') {
                lower = true;
            } else {
                higher = true;
            }

            String substring = filters.getReleaseYear().substring(1);
            int year = Integer.parseInt(substring); // get year as int from the string

            for (SongInput iter : parsedResults) {
                if (!results.contains(iter.getName())) {
                    if(lower && year > iter.getReleaseYear()) {
                        
                        results.add(iter.getName());

                    }
                    if(higher && year < iter.getReleaseYear()) {
                        
                        results.add(iter.getName());

                    }
                }
            }
            parsedResults = clearResults(parsedResults);
        }

        if (filters.getArtist() != null && !filters.getArtist().isEmpty()) { // filter by artist
            for (SongInput iter : parsedResults) {
                if (iter.getArtist().equals(filters.getArtist()) &&
                        !results.contains(iter.getName())) {
                    
                    results.add(iter.getName());

                }
            }
            parsedResults = clearResults(parsedResults);
        }
        results = endResult(parsedResults);
    }

    public ArrayList<SongInput> parseResults(ArrayList<SongInput> parsedResults) {
        ArrayList<SongInput> newParsedResults = new ArrayList<>();

        for (String iter : results) {
            for (SongInput iter2 : parsedResults) {
                if(iter2.getName().equals(iter)) {
                    newParsedResults.add(iter2);
                }
            }
        }
        
        return newParsedResults;
    }
    
    public ArrayList<SongInput> clearResults(ArrayList<SongInput> parsedResults) {
        ArrayList<SongInput> newParsedResults = new ArrayList<>();
        if(!results.isEmpty()) {
            newParsedResults = parseResults(parsedResults);
            results.clear();
        }
        return newParsedResults;
    }

    public ArrayList<String> endResult(ArrayList<SongInput> parsedResults) {
        ArrayList<String> results = new ArrayList<>();
        for (SongInput iter : parsedResults) {
            results.add(iter.getName());
            if(results.size() > 4)
                return results;
        }
        return results;
    }
    @Override
    public void playlistSearch() {
//        if (!filters.getPlaylist().getName().isEmpty()) {
////            for (UserInput iter : library.getUsers()) {
////                if (iter.getPlaylists().contains(filters.getPlaylist().getName()))
//            }
//        }
    }

    @Override
    public void podcastSearch() {
        results = new ArrayList<>();

        if (filters.getName() != null && !filters.getName().isEmpty()) { // filter by name
            for (PodcastInput iter : library.getPodcasts()) {
                if (iter.getName().startsWith(filters.getName())) {
                    results.add(iter.getName());
                }
                if (results.size() > 4) {
                    return;
                }
            }
        }

        if (filters.getOwner() != null && !filters.getOwner().isEmpty()) { // filter by name
            for (PodcastInput iter : library.getPodcasts()) {
                if (iter.getOwner().contains(filters.getOwner())) {
                    results.add(iter.getName());
                }
                if (results.size() > 4) {
                    return;
                }
            }
        }
    }

    public void songSelect() {
        if(itemNumber > results.size()) {
            setMessage("The selected ID is too high.");
        } else if (results.isEmpty()) {
            setMessage("Please conduct a search before making a selection.");
        } else {
            setMessage("Successfully selected " + results.get(itemNumber - 1) + ".");
        }
    }

    @Override
    public String toString() {
        return "Command{" +
                "command='" + command + '\'' +
                ", username='" + username + '\'' +
                ", timestamp=" + timestamp +
                ", type='" + type + '\'' +
                ", filters=" + filters +
                ", itemNumber=" + itemNumber +
                ", message='" + message + '\'' +
                ", results.size()=" + results.size() +
                ", results=" + results +
                ", library=" + library +
                '}';
    }

    public void setMessage(String message) {
        this.message = message;
    }

    public void setResults(ArrayList<String> results) {
        this.results = results;
    }

    public void setCommand(String command) {
        this.command = command;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public void setTimestamp(int timestamp) {
        this.timestamp = timestamp;
    }

    public void setType(String type) {
        this.type = type;
    }

    public void setItemNumber(int itemNumber) {
        this.itemNumber = itemNumber;
    }

}
